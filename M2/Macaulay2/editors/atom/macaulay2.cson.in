# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-legacy-textmate-grammar/
#   - https://gist.github.com/Aerijo/b8c82d647db783187804e86fa0a604a1
#   - https://macromates.com/manual/en/language_grammars.html#naming_conventions
#   - https://www.rexegg.com/regex-quickstart.html

scopeName: 'source.macaulay2'
name: 'Macaulay2'
fileTypes: [ 'm2' ]
patterns: [
  {include: '#keywords'}
  {include: '#comment'}
  {include: '#strings'}
  {include: '#fields'}
  {include: '#math'}
  {include: '#autogen'}
]
repository:
  keywords:
    patterns: [
      {
        match: '''(?x)(\\b|^)(@M2KEYWORDS@)\\b
        '''
        name: 'keyword.control.macaulay2'
      }
      {
        match: '''(?x)(\\b|^)(and|not|or)\\b
        '''
        name: 'keyword.operator.macaulay2'
      }
    ]
  comment:
    patterns: [
      {
        match: '(--).*$'
        captures:
          '1':
            name: 'punctuation.definition.comment.macaulay2'
        name: 'comment.line.double-dash.macaulay2'
      }
      {
        begin: '-\\*'
        beginCaptures:
          '0': name: 'punctuation.definition.comment.begin.macaulay2'
        end: '\\*-'
        endCaptures:
          '0': name: 'punctuation.definition.comment.end.macaulay2'
        contentName: 'comment.block.macaulay2'
      }
    ]
  strings:
    patterns: [
      {
        begin: '"'
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.macaulay2'
        end: '"'
        endCaptures:
          0: name: 'punctuation.definition.string.end.macaulay2'
        name: 'string.quoted.double.macaulay2'
      }
      {
#        begin: '///'
#        beginCaptures:
#          0: name: 'punctuation.definition.string.begin.macaulay2'
#        end: '///'
#        endCaptures:
#          0: name: 'punctuation.definition.string.end.macaulay2'
        match: '@M2STRINGS@'
        name: 'string.unquoted.macaulay2'
      }
    ]
  math:
    patterns: [
      {
        match: '(\\+|\\*)' # FIXME
        name: 'keyword.operator.arithmetic.macaulay2'
      }
      {
        match: '(?<=\\s)\\d+'
        name: 'constant.numeric.integer.macaulay2'
      }
    ]
  'fields':
    patterns: [
      {
        match: '(ZZ|QQ)(\\/\\d+)?'
        name: 'entity.name.type.macaulay2'
      }
    ]
  'autogen':
    patterns: [
      {
        match: '''(?x)(\\b|^)(@M2DATATYPES@)\\b'''
        name: 'entity.name.type.macaulay2'
      }
      {
        match: '''(?x)(\\b|^)(@M2FUNCTIONS@)\\b'''
        name: 'entity.name.function.macaulay2'
      }
      {
        match: '''(?x)(\\b|^)(@M2CONSTANTS@)\\b'''
        name: 'constant.other.macaulay2'
      }
    ]
