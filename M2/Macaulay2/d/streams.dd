use arithmetic;
use nets; -- for dummyNetList
use M2;   -- for tostring

--header "#include <sstream>";
header "#include <string>";

-- TODO: support C++ linkage in the interpreter
export stringstream := Type "struct stringstream *"; -- "std::stringstream *";
export stringbuf    := Type "struct stringbuf *";    -- "std::stringbuf *";

-----------------------------------------------------------------------------
-- Exported variables
-----------------------------------------------------------------------------

export tabWidth := 8;

export STDIN   ::= 0;
export STDOUT  ::= 1;
export STDERR  ::= 2;
export NOERROR ::= 0;
export NOFD    ::= -1;
export ERROR   ::= -1;
export EOF     ::= -2;

export iseof(c:int):bool   := c == EOF; -- end of file
export iserror(c:int):bool := c == ERROR;

-----------------------------------------------------------------------------
-- C++ interface functions defined in std-stream.cpp
-----------------------------------------------------------------------------
-- TODO: convert int to size_t

-- constructors for stringstream
import newstringstream(str:string):stringstream;
export newstringstream():stringstream := newstringstream("");

import Srewindc(stream:stringstream):int;
--import  Slength(stream:stringstream):int;
import cleanstream(stream:stringstream):void;

import Sput(c:char,            stream:stringstream):int;
import Swrite(s:string, n:int, stream:stringstream):int;
import Sflush(fd:int,          stream:stringstream):int;

--export (stream:stringstream) << (n:net)    : stringstream := ...
export (stream:stringstream) << (c:char)   : stringstream := ( Sput(c,              stream); stream );
export (stream:stringstream) << (s:string) : stringstream := ( Swrite(s, length(s), stream); stream );

-----------------------------------------------------------------------------
-- constructors for stringbuf
import newstringbuf(str:string):stringbuf;
export newstringbuf():stringbuf := newstringbuf("");

import getstringbuf(stream:stringstream):stringbuf;

--import Srewindc(buf:stringbuf):int;
import Slength(buf:stringbuf):int;
import cleanbuf(buf:stringbuf):void;

import Sputc(c:char,          buf:stringbuf):int;
import Sputn(s:string, n:int, buf:stringbuf):int;
import Sflush(fd:int,         buf:stringbuf):int;

--export (buf:stringbuf) << (n:net)    : stringbuf := ...
export (buf:stringbuf) << (c:char)   : stringbuf := ( Sputc(c,            buf); buf );
export (buf:stringbuf) << (s:string) : stringbuf := ( Sputn(s, length(s), buf); buf );

import Sgetc(                 buf:stringbuf):int;
import Sgetn(s:string, n:int, buf:stringbuf):int;

--export (buf:stringbuf) . (i:size_t) : char := ...
--export (buf:stringbuf) . (i:size_t) : char := ...

import buftostring(buf:stringbuf, offset:int, n:int):string;
export buftostring(buf:stringbuf, offset:int       ):string := buftostring(buf, offset, Slength(buf) - offset);
export buftostring(buf:stringbuf                   ):string := buftostring(buf, 0,      Slength(buf)); -- TODO: memory inefficient
export    tostring(buf:stringbuf                   ):string := buftostring(buf);

export takestring(buf:stringbuf):string := ( s := buftostring(buf); cleanbuf(buf); s );

--import (stream:stringstream) << (s:stringbuf) : stringstream;

-----------------------------------------------------------------------------
-- Local utilities
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Exported Functions
-----------------------------------------------------------------------------

export newbuffer():string := ""; -- new string len bufsize do provide ' ';

-- FOSS, or File Output Sync State, is the thread local data needed for
-- performing synchronization functionality for a given top level file
export FOSS := {+
     	-- output file stuff
	outbuffer:stringstream,	-- buffer
	                        -- outbuffer . 0 is the first char in the buffer
	outindex:int,	        -- outbuffer.(outindex-1) is the last char
	outbol:int,	        -- outbuffer.outbol = first char of the current line
	     	       	        -- The text after this point may be combined with
				-- subsequently printed nets.
        hadNet:bool,		-- whether a Net is present, in which case the
	     	       	        -- buffer will be empty
	nets:NetList,	        -- list of nets, to be printed after the outbuffer
	outmargin:int,	        -- outbuffer.outmargin is the number of chars written on the last line
        bytesWritten:int,       -- bytes written so far
	lastCharOut:int,        -- when outbuffer empty, last character written, or -1 if none
        capturing:bool		-- whether file output is being captured (for use in generating example output) instead of being written to the file descriptor
    };

--provide a constructor for FOSS
export newFOSS(
 	outbuffer:string,	-- buffer
	                        -- outbuffer . 0 is the first char in the buffer
	outindex:int,	        -- outbuffer.(outindex-1) is the last char
	outbol:int,	        -- outbuffer.outbol = first char of the current line
	     	       	        -- The text after this point may be combined with
				-- subsequently printed nets.
        hadNet:bool,		-- whether a Net is present, in which case the
	     	       	        -- buffer will be empty
	nets:NetList,	        -- list of nets, to be printed after the outbuffer
        bytesWritten:int,       -- bytes written so far
	outmargin:int,	        -- outbuffer.outmargin is the number of chars written on the last line
	lastCharOut:int,        -- when outbuffer empty, last character written, or -1 if none
        capturing:bool		-- whether file output is being captured (for use in generating example output) instead of being written to the file descriptor
    ):FOSS := FOSS(newstringstream(outbuffer), outindex, outbol, hadNet, nets, outmargin, bytesWritten, lastCharOut, capturing);

--provide a default 'constructor' for FOSS.
--this is used by m2file.cpp to create new sync states on the fly for new threads in thread exclusive mode
export newDefaultFOSS():FOSS := newFOSS(newbuffer(),0,0,false,dummyNetList,0,0,-1,false);

-----------------------------------------------------------------------------
-- Legacy Functions (to be deprecated)
-----------------------------------------------------------------------------

--provide a constant representation of default buffer size for a file
export bufsize ::= 4 * 1024;
--create a new buffer of size bufsize and initialize it to ' '
export newinbuffer():string := new string len bufsize do provide ' ';

-- TODO: move all to toStrings.dd
export tostring(i:int):string        := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:long):string       := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:longlong):string   := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:ulong):string      := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:ulonglong):string  := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:float):string      := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
export tostring(i:double):string     := tostring(Ccode(constcharstar, "std::to_string(",i,").c_str()"));
